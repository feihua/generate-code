// Code generated by hertz generator.

package {{.OriginalName}}

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	{{.OriginalName}} "{{.ProjectName}}/api/biz/model/{{.ModuleName}}/{{.OriginalName}}"
	"{{.ProjectName}}/api/client"
	"{{.ProjectName}}/kitex_gen/rpc/{{.ModuleName}}"
	"{{.ProjectName}}/pkg/utils"
)

// Add{{.JavaName}} 添加{{.Comment}}
// @router /add{{.JavaName}} [POST]
func Add{{.JavaName}}(ctx context.Context, c *app.RequestContext) {
	var err error
	var req {{.OriginalName}}.Add{{.JavaName}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}

    createBy := ctx.Value("userName").(string)
	param := &{{.ModuleName}}.Add{{.JavaName}}Req{
	{{- range .TableColumn}}
        {{- if isContain .GoNamePublic "Create"}}
        {{- else if isContain .GoNamePublic "Update"}}
        {{- else if eq .ColumnKey "PRI"}}
        {{- else}}
        {{.GoNamePublic}}: req.{{.GoNamePublic}}, //{{.ColumnComment}}
        {{- end}}
        {{- end}}
		CreateBy:      createBy, // 创建者
	}

	result, err := client.{{.JavaName}}Client.Add{{.JavaName}}(ctx, param)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}

	if result.BaseResp.Code != "200" {
		utils.Error(c, result.BaseResp.Msg)
		return
	}

	utils.OK(c)
}

// Delete{{.JavaName}} 删除{{.Comment}}
// @router /delete{{.JavaName}} [POST]
func Delete{{.JavaName}}(ctx context.Context, c *app.RequestContext) {
	var err error
	var req {{.OriginalName}}.Delete{{.JavaName}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	param := &{{.ModuleName}}.Delete{{.JavaName}}Req{
		Ids: req.Ids,
	}
	result, err := client.{{.JavaName}}Client.Delete{{.JavaName}}(ctx, param)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	if result.BaseResp.Code != "200" {
		utils.Error(c, result.BaseResp.Msg)
		return
	}

	utils.OK(c)
}

// Update{{.JavaName}} 更新{{.Comment}}
// @router /update{{.JavaName}}Req [POST]
func Update{{.JavaName}}(ctx context.Context, c *app.RequestContext) {
	var err error
	var req {{.OriginalName}}.Update{{.JavaName}}Req
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}

	updateBy := ctx.Value("userName").(string)
	param := &{{.ModuleName}}.Update{{.JavaName}}Req{
    {{- range .TableColumn}}
        {{- if isContain .GoNamePublic "Create"}}
        {{- else if isContain .GoNamePublic "Update"}}
        {{- else if isContain .GoNamePublic "Id"}}
        {{.GoNamePublic}}: req.{{Replace .GoNamePublic "Id" "ID"}}, //{{.ColumnComment}}
        {{- else}}
        {{.GoNamePublic}}: req.{{.GoNamePublic}}, //{{.ColumnComment}}
        {{- end}}
        {{- end}}
		UpdateBy:      updateBy,
	}
	result, err := client.{{.JavaName}}Client.Update{{.JavaName}}(ctx, param)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	if result.BaseResp.Code != "200" {
		utils.Error(c, result.BaseResp.Msg)
		return
	}

	utils.OK(c)
}

// Update{{.JavaName}}Status 更新{{.Comment}}状态
// @router /update{{.JavaName}}StatusReq [POST]
func Update{{.JavaName}}Status(ctx context.Context, c *app.RequestContext) {
	var err error
	var req {{.OriginalName}}.Update{{.JavaName}}StatusReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}

	updateBy := ctx.Value("userName").(string)
	param := &{{.ModuleName}}.Update{{.JavaName}}StatusReq{
		Ids:      req.Ids,
		Status:   req.Status,
		UpdateBy: updateBy,
	}
	result, err := client.{{.JavaName}}Client.Update{{.JavaName}}Status(ctx, param)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	if result.BaseResp.Code != "200" {
		utils.Error(c, result.BaseResp.Msg)
		return
	}

	utils.OK(c)
}

// Query{{.JavaName}}Detail 查询{{.Comment}}详情
// @router /query{{.JavaName}}DetailReq [POST]
func Query{{.JavaName}}Detail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req {{.OriginalName}}.Query{{.JavaName}}DetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	param := &{{.ModuleName}}.Query{{.JavaName}}DetailReq{
		Id: req.Id,
	}
	result, err := client.{{.JavaName}}Client.Query{{.JavaName}}Detail(ctx, param)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	if result.BaseResp.Code != "200" {
		utils.Error(c, result.BaseResp.Msg)
		return
	}

	utils.Success(c, result.Data)
}

// Query{{.JavaName}}List 查询{{.Comment}}列表
// @router /query{{.JavaName}}ListReq [POST]
func Query{{.JavaName}}List(ctx context.Context, c *app.RequestContext) {
	var err error
	var req {{.OriginalName}}.Query{{.JavaName}}ListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	param := &{{.ModuleName}}.Query{{.JavaName}}ListReq{
{{- range .TableColumn}}
    {{- if isContain .GoNamePublic "Create"}}
    {{- else if isContain .GoNamePublic "Update"}}
    {{- else if eq .ColumnKey "PRI"}}
    {{- else if isContain .JavaName "remark"}}
    {{- else if isContain .JavaName "sort"}}
    {{- else if isContain .JavaName "Sort"}}
    {{- else }}
        {{.GoNamePublic}}: req.{{.GoNamePublic}}, //{{.ColumnComment}}
    {{- end}}
    {{- end}}
	}
	result, err := client.{{.JavaName}}Client.Query{{.JavaName}}List(ctx, param)
	if err != nil {
		utils.Error(c, err.Error())
		return
	}
	if result.BaseResp.Code != "200" {
		utils.Error(c, result.BaseResp.Msg)
		return
	}

	utils.SuccessPage(c, result.List, result.Total)
}
